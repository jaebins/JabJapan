{"ast":null,"code":"/**\r\n * Hangul.js\r\n * https://github.com/e-/Hangul.js\r\n *\r\n * Copyright 2017, Jaemin Jo\r\n * under the MIT license.\r\n */\n\n(function () {\n  'use strict';\n\n  var CHO = ['ㄱ', 'ㄲ', 'ㄴ', 'ㄷ', 'ㄸ', 'ㄹ', 'ㅁ', 'ㅂ', 'ㅃ', 'ㅅ', 'ㅆ', 'ㅇ', 'ㅈ', 'ㅉ', 'ㅊ', 'ㅋ', 'ㅌ', 'ㅍ', 'ㅎ'],\n    JUNG = ['ㅏ', 'ㅐ', 'ㅑ', 'ㅒ', 'ㅓ', 'ㅔ', 'ㅕ', 'ㅖ', 'ㅗ', ['ㅗ', 'ㅏ'], ['ㅗ', 'ㅐ'], ['ㅗ', 'ㅣ'], 'ㅛ', 'ㅜ', ['ㅜ', 'ㅓ'], ['ㅜ', 'ㅔ'], ['ㅜ', 'ㅣ'], 'ㅠ', 'ㅡ', ['ㅡ', 'ㅣ'], 'ㅣ'],\n    JONG = ['', 'ㄱ', 'ㄲ', ['ㄱ', 'ㅅ'], 'ㄴ', ['ㄴ', 'ㅈ'], ['ㄴ', 'ㅎ'], 'ㄷ', 'ㄹ', ['ㄹ', 'ㄱ'], ['ㄹ', 'ㅁ'], ['ㄹ', 'ㅂ'], ['ㄹ', 'ㅅ'], ['ㄹ', 'ㅌ'], ['ㄹ', 'ㅍ'], ['ㄹ', 'ㅎ'], 'ㅁ', 'ㅂ', ['ㅂ', 'ㅅ'], 'ㅅ', 'ㅆ', 'ㅇ', 'ㅈ', 'ㅊ', 'ㅋ', 'ㅌ', 'ㅍ', 'ㅎ'],\n    HANGUL_OFFSET = 0xAC00,\n    CONSONANTS = ['ㄱ', 'ㄲ', 'ㄳ', 'ㄴ', 'ㄵ', 'ㄶ', 'ㄷ', 'ㄸ', 'ㄹ', 'ㄺ', 'ㄻ', 'ㄼ', 'ㄽ', 'ㄾ', 'ㄿ', 'ㅀ', 'ㅁ', 'ㅂ', 'ㅃ', 'ㅄ', 'ㅅ', 'ㅆ', 'ㅇ', 'ㅈ', 'ㅉ', 'ㅊ', 'ㅋ', 'ㅌ', 'ㅍ', 'ㅎ'],\n    COMPLETE_CHO = ['ㄱ', 'ㄲ', 'ㄴ', 'ㄷ', 'ㄸ', 'ㄹ', 'ㅁ', 'ㅂ', 'ㅃ', 'ㅅ', 'ㅆ', 'ㅇ', 'ㅈ', 'ㅉ', 'ㅊ', 'ㅋ', 'ㅌ', 'ㅍ', 'ㅎ'],\n    COMPLETE_JUNG = ['ㅏ', 'ㅐ', 'ㅑ', 'ㅒ', 'ㅓ', 'ㅔ', 'ㅕ', 'ㅖ', 'ㅗ', 'ㅘ', 'ㅙ', 'ㅚ', 'ㅛ', 'ㅜ', 'ㅝ', 'ㅞ', 'ㅟ', 'ㅠ', 'ㅡ', 'ㅢ', 'ㅣ'],\n    COMPLETE_JONG = ['', 'ㄱ', 'ㄲ', 'ㄳ', 'ㄴ', 'ㄵ', 'ㄶ', 'ㄷ', 'ㄹ', 'ㄺ', 'ㄻ', 'ㄼ', 'ㄽ', 'ㄾ', 'ㄿ', 'ㅀ', 'ㅁ', 'ㅂ', 'ㅄ', 'ㅅ', 'ㅆ', 'ㅇ', 'ㅈ', 'ㅊ', 'ㅋ', 'ㅌ', 'ㅍ', 'ㅎ'],\n    COMPLEX_CONSONANTS = [['ㄱ', 'ㅅ', 'ㄳ'], ['ㄴ', 'ㅈ', 'ㄵ'], ['ㄴ', 'ㅎ', 'ㄶ'], ['ㄹ', 'ㄱ', 'ㄺ'], ['ㄹ', 'ㅁ', 'ㄻ'], ['ㄹ', 'ㅂ', 'ㄼ'], ['ㄹ', 'ㅅ', 'ㄽ'], ['ㄹ', 'ㅌ', 'ㄾ'], ['ㄹ', 'ㅍ', 'ㄿ'], ['ㄹ', 'ㅎ', 'ㅀ'], ['ㅂ', 'ㅅ', 'ㅄ']],\n    COMPLEX_VOWELS = [['ㅗ', 'ㅏ', 'ㅘ'], ['ㅗ', 'ㅐ', 'ㅙ'], ['ㅗ', 'ㅣ', 'ㅚ'], ['ㅜ', 'ㅓ', 'ㅝ'], ['ㅜ', 'ㅔ', 'ㅞ'], ['ㅜ', 'ㅣ', 'ㅟ'], ['ㅡ', 'ㅣ', 'ㅢ']],\n    CONSONANTS_HASH,\n    CHO_HASH,\n    JUNG_HASH,\n    JONG_HASH,\n    COMPLEX_CONSONANTS_HASH,\n    COMPLEX_VOWELS_HASH;\n  function _makeHash(array) {\n    var length = array.length,\n      hash = {\n        0: 0\n      };\n    for (var i = 0; i < length; i++) {\n      if (array[i]) hash[array[i].charCodeAt(0)] = i;\n    }\n    return hash;\n  }\n  CONSONANTS_HASH = _makeHash(CONSONANTS);\n  CHO_HASH = _makeHash(COMPLETE_CHO);\n  JUNG_HASH = _makeHash(COMPLETE_JUNG);\n  JONG_HASH = _makeHash(COMPLETE_JONG);\n  function _makeComplexHash(array) {\n    var length = array.length,\n      hash = {},\n      code1,\n      code2;\n    for (var i = 0; i < length; i++) {\n      code1 = array[i][0].charCodeAt(0);\n      code2 = array[i][1].charCodeAt(0);\n      if (typeof hash[code1] === 'undefined') {\n        hash[code1] = {};\n      }\n      hash[code1][code2] = array[i][2].charCodeAt(0);\n    }\n    return hash;\n  }\n  COMPLEX_CONSONANTS_HASH = _makeComplexHash(COMPLEX_CONSONANTS);\n  COMPLEX_VOWELS_HASH = _makeComplexHash(COMPLEX_VOWELS);\n  function _isConsonant(c) {\n    return typeof CONSONANTS_HASH[c] !== 'undefined';\n  }\n  function _isCho(c) {\n    return typeof CHO_HASH[c] !== 'undefined';\n  }\n  function _isJung(c) {\n    return typeof JUNG_HASH[c] !== 'undefined';\n  }\n  function _isJong(c) {\n    return typeof JONG_HASH[c] !== 'undefined';\n  }\n  function _isHangul(c /* code number */) {\n    return 0xAC00 <= c && c <= 0xd7a3;\n  }\n  function _isJungJoinable(a, b) {\n    return COMPLEX_VOWELS_HASH[a] && COMPLEX_VOWELS_HASH[a][b] ? COMPLEX_VOWELS_HASH[a][b] : false;\n  }\n  function _isJongJoinable(a, b) {\n    return COMPLEX_CONSONANTS_HASH[a] && COMPLEX_CONSONANTS_HASH[a][b] ? COMPLEX_CONSONANTS_HASH[a][b] : false;\n  }\n  var disassemble = function (string, grouped) {\n    if (string === null) {\n      throw new Error('Arguments cannot be null');\n    }\n    if (typeof string === 'object') {\n      string = string.join('');\n    }\n    var result = [],\n      length = string.length,\n      cho,\n      jung,\n      jong,\n      code,\n      r;\n    for (var i = 0; i < length; i++) {\n      var temp = [];\n      code = string.charCodeAt(i);\n      if (_isHangul(code)) {\n        // 완성된 한글이면\n        code -= HANGUL_OFFSET;\n        jong = code % 28;\n        jung = (code - jong) / 28 % 21;\n        cho = parseInt((code - jong) / 28 / 21);\n        temp.push(CHO[cho]);\n        if (typeof JUNG[jung] === 'object') {\n          temp = temp.concat(JUNG[jung]);\n        } else {\n          temp.push(JUNG[jung]);\n        }\n        if (jong > 0) {\n          if (typeof JONG[jong] === 'object') {\n            temp = temp.concat(JONG[jong]);\n          } else {\n            temp.push(JONG[jong]);\n          }\n        }\n      } else if (_isConsonant(code)) {\n        //자음이면\n        if (_isCho(code)) {\n          r = CHO[CHO_HASH[code]];\n        } else {\n          r = JONG[JONG_HASH[code]];\n        }\n        if (typeof r === 'string') {\n          temp.push(r);\n        } else {\n          temp = temp.concat(r);\n        }\n      } else if (_isJung(code)) {\n        r = JUNG[JUNG_HASH[code]];\n        if (typeof r === 'string') {\n          temp.push(r);\n        } else {\n          temp = temp.concat(r);\n        }\n      } else {\n        temp.push(string.charAt(i));\n      }\n      if (grouped) result.push(temp);else result = result.concat(temp);\n    }\n    return result;\n  };\n  var disassembleToString = function (str) {\n    if (typeof str !== 'string') {\n      return '';\n    }\n    str = disassemble(str);\n    return str.join('');\n  };\n  var assemble = function (array) {\n    if (typeof array === 'string') {\n      array = disassemble(array);\n    }\n    var result = [],\n      length = array.length,\n      code,\n      stage = 0,\n      complete_index = -1,\n      //완성된 곳의 인덱스\n      previous_code,\n      jong_joined = false;\n    function _makeHangul(index) {\n      // complete_index + 1부터 index까지를 greedy하게 한글로 만든다.\n      var code,\n        cho,\n        jung1,\n        jung2,\n        jong1 = 0,\n        jong2,\n        hangul = '';\n      jong_joined = false;\n      if (complete_index + 1 > index) {\n        return;\n      }\n      for (var step = 1;; step++) {\n        if (step === 1) {\n          cho = array[complete_index + step].charCodeAt(0);\n          if (_isJung(cho)) {\n            // 첫번째 것이 모음이면 1) ㅏ같은 경우이거나 2) ㅙ같은 경우이다\n            if (complete_index + step + 1 <= index && _isJung(jung1 = array[complete_index + step + 1].charCodeAt(0))) {\n              //다음것이 있고 모음이면\n              result.push(String.fromCharCode(_isJungJoinable(cho, jung1)));\n              complete_index = index;\n              return;\n            } else {\n              result.push(array[complete_index + step]);\n              complete_index = index;\n              return;\n            }\n          } else if (!_isCho(cho)) {\n            result.push(array[complete_index + step]);\n            complete_index = index;\n            return;\n          }\n          hangul = array[complete_index + step];\n        } else if (step === 2) {\n          jung1 = array[complete_index + step].charCodeAt(0);\n          if (_isCho(jung1)) {\n            //두번째 또 자음이 오면 ㄳ 에서 ㅅ같은 경우이다\n            cho = _isJongJoinable(cho, jung1);\n            hangul = String.fromCharCode(cho);\n            result.push(hangul);\n            complete_index = index;\n            return;\n          } else {\n            hangul = String.fromCharCode((CHO_HASH[cho] * 21 + JUNG_HASH[jung1]) * 28 + HANGUL_OFFSET);\n          }\n        } else if (step === 3) {\n          jung2 = array[complete_index + step].charCodeAt(0);\n          if (_isJungJoinable(jung1, jung2)) {\n            jung1 = _isJungJoinable(jung1, jung2);\n          } else {\n            jong1 = jung2;\n          }\n          hangul = String.fromCharCode((CHO_HASH[cho] * 21 + JUNG_HASH[jung1]) * 28 + JONG_HASH[jong1] + HANGUL_OFFSET);\n        } else if (step === 4) {\n          jong2 = array[complete_index + step].charCodeAt(0);\n          if (_isJongJoinable(jong1, jong2)) {\n            jong1 = _isJongJoinable(jong1, jong2);\n          } else {\n            jong1 = jong2;\n          }\n          hangul = String.fromCharCode((CHO_HASH[cho] * 21 + JUNG_HASH[jung1]) * 28 + JONG_HASH[jong1] + HANGUL_OFFSET);\n        } else if (step === 5) {\n          jong2 = array[complete_index + step].charCodeAt(0);\n          jong1 = _isJongJoinable(jong1, jong2);\n          hangul = String.fromCharCode((CHO_HASH[cho] * 21 + JUNG_HASH[jung1]) * 28 + JONG_HASH[jong1] + HANGUL_OFFSET);\n        }\n        if (complete_index + step >= index) {\n          result.push(hangul);\n          complete_index = index;\n          return;\n        }\n      }\n    }\n    for (var i = 0; i < length; i++) {\n      code = array[i].charCodeAt(0);\n      if (!_isCho(code) && !_isJung(code) && !_isJong(code)) {\n        //초, 중, 종성 다 아니면\n        _makeHangul(i - 1);\n        _makeHangul(i);\n        stage = 0;\n        continue;\n      }\n      //console.log(stage, array[i]);\n      if (stage === 0) {\n        // 초성이 올 차례\n        if (_isCho(code)) {\n          // 초성이 오면 아무 문제 없다.\n          stage = 1;\n        } else if (_isJung(code)) {\n          // 중성이오면 ㅐ 또는 ㅘ 인것이다. 바로 구분을 못한다. 따라서 특수한 stage인 stage4로 이동\n          stage = 4;\n        }\n      } else if (stage == 1) {\n        //중성이 올 차례\n        if (_isJung(code)) {\n          //중성이 오면 문제없음 진행.\n          stage = 2;\n        } else {\n          //아니고 자음이오면 ㄻ같은 경우가 있고 ㄹㅋ같은 경우가 있다.\n          if (_isJongJoinable(previous_code, code)) {\n            // 합쳐질 수 있다면 ㄻ 같은 경우인데 이 뒤에 모음이 와서 ㄹ마 가 될수도 있고 초성이 올 수도 있다. 따라서 섣불리 완성할 수 없다. 이땐 stage5로 간다.\n            stage = 5;\n          } else {\n            //합쳐질 수 없다면 앞 글자 완성 후 여전히 중성이 올 차례\n            _makeHangul(i - 1);\n          }\n        }\n      } else if (stage == 2) {\n        //종성이 올 차례\n        if (_isJong(code)) {\n          //종성이 오면 다음엔 자음 또는 모음이 온다.\n          stage = 3;\n        } else if (_isJung(code)) {\n          //그런데 중성이 오면 앞의 모음과 합칠 수 있는지 본다.\n          if (_isJungJoinable(previous_code, code)) {//합칠 수 있으면 여전히 종성이 올 차례고 그대로 진행\n          } else {\n            // 합칠 수 없다면 오타가 생긴 경우\n            _makeHangul(i - 1);\n            stage = 4;\n          }\n        } else {\n          // 받침이 안되는 자음이 오면 ㄸ 같은 이전까지 완성하고 다시시작\n          _makeHangul(i - 1);\n          stage = 1;\n        }\n      } else if (stage == 3) {\n        // 종성이 하나 온 상태.\n        if (_isJong(code)) {\n          // 또 종성이면 합칠수 있는지 본다.\n          if (!jong_joined && _isJongJoinable(previous_code, code)) {\n            //합칠 수 있으면 계속 진행. 왜냐하면 이번에 온 자음이 다음 글자의 초성이 될 수도 있기 때문. 대신 이 기회는 한번만\n            jong_joined = true;\n          } else {\n            //없으면 한글자 완성\n            _makeHangul(i - 1);\n            stage = 1; // 이 종성이 초성이 되고 중성부터 시작\n          }\n        } else if (_isCho(code)) {\n          // 초성이면 한글자 완성.\n          _makeHangul(i - 1);\n          stage = 1; //이 글자가 초성이되므로 중성부터 시작\n        } else if (_isJung(code)) {\n          // 중성이면 이전 종성은 이 중성과 합쳐지고 앞 글자는 받침이 없다.\n          _makeHangul(i - 2);\n          stage = 2;\n        }\n      } else if (stage == 4) {\n        // 중성이 하나 온 상태\n        if (_isJung(code)) {\n          //중성이 온 경우\n          if (_isJungJoinable(previous_code, code)) {\n            //이전 중성과 합쳐질 수 있는 경우\n            _makeHangul(i);\n            stage = 0;\n          } else {\n            //중성이 왔지만 못합치는 경우. ㅒㅗ 같은\n            _makeHangul(i - 1);\n          }\n        } else {\n          // 아니면 자음이 온 경우.\n          _makeHangul(i - 1);\n          stage = 1;\n        }\n      } else if (stage == 5) {\n        // 초성이 연속해서 두개 온 상태 ㄺ\n        if (_isJung(code)) {\n          //이번에 중성이면 ㄹ가\n          _makeHangul(i - 2);\n          stage = 2;\n        } else {\n          _makeHangul(i - 1);\n          stage = 1;\n        }\n      }\n      previous_code = code;\n    }\n    _makeHangul(i - 1);\n    return result.join('');\n  };\n  var search = function (a, b) {\n    var ad = disassemble(a).join(''),\n      bd = disassemble(b).join('');\n    return ad.indexOf(bd);\n  };\n  var rangeSearch = function (haystack, needle) {\n    var hex = disassemble(haystack).join(''),\n      nex = disassemble(needle).join(''),\n      grouped = disassemble(haystack, true),\n      re = new RegExp(nex, 'gi'),\n      indices = [],\n      result;\n    if (!needle.length) return [];\n    while (result = re.exec(hex)) {\n      indices.push(result.index);\n    }\n    function findStart(index) {\n      for (var i = 0, length = 0; i < grouped.length; ++i) {\n        length += grouped[i].length;\n        if (index < length) return i;\n      }\n    }\n    function findEnd(index) {\n      for (var i = 0, length = 0; i < grouped.length; ++i) {\n        length += grouped[i].length;\n        if (index + nex.length <= length) return i;\n      }\n    }\n    return indices.map(function (i) {\n      return [findStart(i), findEnd(i)];\n    });\n  };\n  function Searcher(string) {\n    this.string = string;\n    this.disassembled = disassemble(string).join('');\n  }\n  Searcher.prototype.search = function (string) {\n    return disassemble(string).join('').indexOf(this.disassembled);\n  };\n  var endsWithConsonant = function (string) {\n    if (typeof string === 'object') {\n      string = string.join('');\n    }\n    var code = string.charCodeAt(string.length - 1);\n    if (_isHangul(code)) {\n      // 완성된 한글이면\n      code -= HANGUL_OFFSET;\n      var jong = code % 28;\n      if (jong > 0) {\n        return true;\n      }\n    } else if (_isConsonant(code)) {\n      //자음이면\n      return true;\n    }\n    return false;\n  };\n  var endsWith = function (string, target) {\n    return disassemble(string).pop() === target;\n  };\n  var hangul = {\n    disassemble: disassemble,\n    d: disassemble,\n    // alias for disassemble\n    disassembleToString: disassembleToString,\n    ds: disassembleToString,\n    // alias for disassembleToString\n    assemble: assemble,\n    a: assemble,\n    // alias for assemble\n    search: search,\n    rangeSearch: rangeSearch,\n    Searcher: Searcher,\n    endsWithConsonant: endsWithConsonant,\n    endsWith: endsWith,\n    isHangul: function (c) {\n      if (typeof c === 'string') c = c.charCodeAt(0);\n      return _isHangul(c);\n    },\n    isComplete: function (c) {\n      if (typeof c === 'string') c = c.charCodeAt(0);\n      return _isHangul(c);\n    },\n    isConsonant: function (c) {\n      if (typeof c === 'string') c = c.charCodeAt(0);\n      return _isConsonant(c);\n    },\n    isVowel: function (c) {\n      if (typeof c === 'string') c = c.charCodeAt(0);\n      return _isJung(c);\n    },\n    isCho: function (c) {\n      if (typeof c === 'string') c = c.charCodeAt(0);\n      return _isCho(c);\n    },\n    isJong: function (c) {\n      if (typeof c === 'string') c = c.charCodeAt(0);\n      return _isJong(c);\n    },\n    isHangulAll: function (str) {\n      if (typeof str !== 'string') return false;\n      for (var i = 0; i < str.length; i++) {\n        if (!_isHangul(str.charCodeAt(i))) return false;\n      }\n      return true;\n    },\n    isCompleteAll: function (str) {\n      if (typeof str !== 'string') return false;\n      for (var i = 0; i < str.length; i++) {\n        if (!_isHangul(str.charCodeAt(i))) return false;\n      }\n      return true;\n    },\n    isConsonantAll: function (str) {\n      if (typeof str !== 'string') return false;\n      for (var i = 0; i < str.length; i++) {\n        if (!_isConsonant(str.charCodeAt(i))) return false;\n      }\n      return true;\n    },\n    isVowelAll: function (str) {\n      if (typeof str !== 'string') return false;\n      for (var i = 0; i < str.length; i++) {\n        if (!_isJung(str.charCodeAt(i))) return false;\n      }\n      return true;\n    },\n    isChoAll: function (str) {\n      if (typeof str !== 'string') return false;\n      for (var i = 0; i < str.length; i++) {\n        if (!_isCho(str.charCodeAt(i))) return false;\n      }\n      return true;\n    },\n    isJongAll: function (str) {\n      if (typeof str !== 'string') return false;\n      for (var i = 0; i < str.length; i++) {\n        if (!_isJong(str.charCodeAt(i))) return false;\n      }\n      return true;\n    }\n  };\n  if (typeof define == 'function' && define.amd) {\n    define(function () {\n      return hangul;\n    });\n  } else if (typeof module !== 'undefined') {\n    module.exports = hangul;\n  } else {\n    window.Hangul = hangul;\n  }\n})();","map":{"version":3,"names":["CHO","JUNG","JONG","HANGUL_OFFSET","CONSONANTS","COMPLETE_CHO","COMPLETE_JUNG","COMPLETE_JONG","COMPLEX_CONSONANTS","COMPLEX_VOWELS","CONSONANTS_HASH","CHO_HASH","JUNG_HASH","JONG_HASH","COMPLEX_CONSONANTS_HASH","COMPLEX_VOWELS_HASH","_makeHash","array","length","hash","i","charCodeAt","_makeComplexHash","code1","code2","_isConsonant","c","_isCho","_isJung","_isJong","_isHangul","_isJungJoinable","a","b","_isJongJoinable","disassemble","string","grouped","Error","join","result","cho","jung","jong","code","r","temp","parseInt","push","concat","charAt","disassembleToString","str","assemble","stage","complete_index","previous_code","jong_joined","_makeHangul","index","jung1","jung2","jong1","jong2","hangul","step","String","fromCharCode","search","ad","bd","indexOf","rangeSearch","haystack","needle","hex","nex","re","RegExp","indices","exec","findStart","findEnd","map","Searcher","disassembled","prototype","endsWithConsonant","endsWith","target","pop","d","ds","isHangul","isComplete","isConsonant","isVowel","isCho","isJong","isHangulAll","isCompleteAll","isConsonantAll","isVowelAll","isChoAll","isJongAll","define","amd","module","exports","window","Hangul"],"sources":["C:/Users/SJ507-5/jen2063_jabjapan/node_modules/hangul-js/hangul.js"],"sourcesContent":["/**\r\n * Hangul.js\r\n * https://github.com/e-/Hangul.js\r\n *\r\n * Copyright 2017, Jaemin Jo\r\n * under the MIT license.\r\n */\r\n\r\n(function () {\r\n    'use strict';\r\n    var CHO = [\r\n        'ㄱ', 'ㄲ', 'ㄴ', 'ㄷ', 'ㄸ',\r\n        'ㄹ', 'ㅁ', 'ㅂ', 'ㅃ', 'ㅅ', 'ㅆ',\r\n        'ㅇ', 'ㅈ', 'ㅉ', 'ㅊ', 'ㅋ', 'ㅌ',\r\n        'ㅍ', 'ㅎ'\r\n    ],\r\n        JUNG = [\r\n            'ㅏ', 'ㅐ', 'ㅑ', 'ㅒ', 'ㅓ',\r\n            'ㅔ', 'ㅕ', 'ㅖ', 'ㅗ', ['ㅗ', 'ㅏ'], ['ㅗ', 'ㅐ'],\r\n            ['ㅗ', 'ㅣ'], 'ㅛ', 'ㅜ', ['ㅜ', 'ㅓ'], ['ㅜ', 'ㅔ'], ['ㅜ', 'ㅣ'],\r\n            'ㅠ', 'ㅡ', ['ㅡ', 'ㅣ'], 'ㅣ'\r\n        ],\r\n        JONG = [\r\n            '', 'ㄱ', 'ㄲ', ['ㄱ', 'ㅅ'], 'ㄴ', ['ㄴ', 'ㅈ'], ['ㄴ', 'ㅎ'], 'ㄷ', 'ㄹ',\r\n            ['ㄹ', 'ㄱ'], ['ㄹ', 'ㅁ'], ['ㄹ', 'ㅂ'], ['ㄹ', 'ㅅ'], ['ㄹ', 'ㅌ'], ['ㄹ', 'ㅍ'], ['ㄹ', 'ㅎ'], 'ㅁ',\r\n            'ㅂ', ['ㅂ', 'ㅅ'], 'ㅅ', 'ㅆ', 'ㅇ', 'ㅈ', 'ㅊ', 'ㅋ', 'ㅌ', 'ㅍ', 'ㅎ'\r\n        ],\r\n        HANGUL_OFFSET = 0xAC00,\r\n        CONSONANTS = [\r\n            'ㄱ', 'ㄲ', 'ㄳ', 'ㄴ', 'ㄵ', 'ㄶ', 'ㄷ', 'ㄸ',\r\n            'ㄹ', 'ㄺ', 'ㄻ', 'ㄼ', 'ㄽ', 'ㄾ', 'ㄿ', 'ㅀ',\r\n            'ㅁ', 'ㅂ', 'ㅃ', 'ㅄ', 'ㅅ', 'ㅆ', 'ㅇ', 'ㅈ',\r\n            'ㅉ', 'ㅊ', 'ㅋ', 'ㅌ', 'ㅍ', 'ㅎ'\r\n        ],\r\n        COMPLETE_CHO = [\r\n            'ㄱ', 'ㄲ', 'ㄴ', 'ㄷ', 'ㄸ',\r\n            'ㄹ', 'ㅁ', 'ㅂ', 'ㅃ', 'ㅅ', 'ㅆ',\r\n            'ㅇ', 'ㅈ', 'ㅉ', 'ㅊ', 'ㅋ', 'ㅌ', 'ㅍ', 'ㅎ'\r\n        ],\r\n        COMPLETE_JUNG = [\r\n            'ㅏ', 'ㅐ', 'ㅑ', 'ㅒ', 'ㅓ',\r\n            'ㅔ', 'ㅕ', 'ㅖ', 'ㅗ', 'ㅘ', 'ㅙ',\r\n            'ㅚ', 'ㅛ', 'ㅜ', 'ㅝ', 'ㅞ', 'ㅟ',\r\n            'ㅠ', 'ㅡ', 'ㅢ', 'ㅣ'\r\n        ],\r\n        COMPLETE_JONG = [\r\n            '', 'ㄱ', 'ㄲ', 'ㄳ', 'ㄴ', 'ㄵ', 'ㄶ', 'ㄷ', 'ㄹ',\r\n            'ㄺ', 'ㄻ', 'ㄼ', 'ㄽ', 'ㄾ', 'ㄿ', 'ㅀ', 'ㅁ',\r\n            'ㅂ', 'ㅄ', 'ㅅ', 'ㅆ', 'ㅇ', 'ㅈ', 'ㅊ', 'ㅋ', 'ㅌ', 'ㅍ', 'ㅎ'\r\n        ],\r\n        COMPLEX_CONSONANTS = [\r\n            ['ㄱ', 'ㅅ', 'ㄳ'],\r\n            ['ㄴ', 'ㅈ', 'ㄵ'],\r\n            ['ㄴ', 'ㅎ', 'ㄶ'],\r\n            ['ㄹ', 'ㄱ', 'ㄺ'],\r\n            ['ㄹ', 'ㅁ', 'ㄻ'],\r\n            ['ㄹ', 'ㅂ', 'ㄼ'],\r\n            ['ㄹ', 'ㅅ', 'ㄽ'],\r\n            ['ㄹ', 'ㅌ', 'ㄾ'],\r\n            ['ㄹ', 'ㅍ', 'ㄿ'],\r\n            ['ㄹ', 'ㅎ', 'ㅀ'],\r\n            ['ㅂ', 'ㅅ', 'ㅄ']\r\n        ],\r\n        COMPLEX_VOWELS = [\r\n            ['ㅗ', 'ㅏ', 'ㅘ'],\r\n            ['ㅗ', 'ㅐ', 'ㅙ'],\r\n            ['ㅗ', 'ㅣ', 'ㅚ'],\r\n            ['ㅜ', 'ㅓ', 'ㅝ'],\r\n            ['ㅜ', 'ㅔ', 'ㅞ'],\r\n            ['ㅜ', 'ㅣ', 'ㅟ'],\r\n            ['ㅡ', 'ㅣ', 'ㅢ']\r\n        ],\r\n        CONSONANTS_HASH,\r\n        CHO_HASH,\r\n        JUNG_HASH,\r\n        JONG_HASH,\r\n        COMPLEX_CONSONANTS_HASH,\r\n        COMPLEX_VOWELS_HASH\r\n        ;\r\n\r\n    function _makeHash(array) {\r\n        var length = array.length,\r\n            hash = { 0: 0 }\r\n            ;\r\n        for (var i = 0; i < length; i++) {\r\n            if (array[i])\r\n                hash[array[i].charCodeAt(0)] = i;\r\n        }\r\n        return hash;\r\n    }\r\n\r\n    CONSONANTS_HASH = _makeHash(CONSONANTS);\r\n    CHO_HASH = _makeHash(COMPLETE_CHO);\r\n    JUNG_HASH = _makeHash(COMPLETE_JUNG);\r\n    JONG_HASH = _makeHash(COMPLETE_JONG);\r\n\r\n    function _makeComplexHash(array) {\r\n        var length = array.length,\r\n            hash = {},\r\n            code1,\r\n            code2\r\n            ;\r\n        for (var i = 0; i < length; i++) {\r\n            code1 = array[i][0].charCodeAt(0);\r\n            code2 = array[i][1].charCodeAt(0);\r\n            if (typeof hash[code1] === 'undefined') {\r\n                hash[code1] = {};\r\n            }\r\n            hash[code1][code2] = array[i][2].charCodeAt(0);\r\n        }\r\n        return hash;\r\n    }\r\n\r\n    COMPLEX_CONSONANTS_HASH = _makeComplexHash(COMPLEX_CONSONANTS);\r\n    COMPLEX_VOWELS_HASH = _makeComplexHash(COMPLEX_VOWELS);\r\n\r\n    function _isConsonant(c) {\r\n        return typeof CONSONANTS_HASH[c] !== 'undefined';\r\n    }\r\n\r\n    function _isCho(c) {\r\n        return typeof CHO_HASH[c] !== 'undefined';\r\n    }\r\n\r\n    function _isJung(c) {\r\n        return typeof JUNG_HASH[c] !== 'undefined';\r\n    }\r\n\r\n    function _isJong(c) {\r\n        return typeof JONG_HASH[c] !== 'undefined';\r\n    }\r\n\r\n    function _isHangul(c /* code number */) {\r\n        return 0xAC00 <= c && c <= 0xd7a3;\r\n    }\r\n\r\n    function _isJungJoinable(a, b) {\r\n        return (COMPLEX_VOWELS_HASH[a] && COMPLEX_VOWELS_HASH[a][b]) ? COMPLEX_VOWELS_HASH[a][b] : false;\r\n    }\r\n\r\n    function _isJongJoinable(a, b) {\r\n        return COMPLEX_CONSONANTS_HASH[a] && COMPLEX_CONSONANTS_HASH[a][b] ? COMPLEX_CONSONANTS_HASH[a][b] : false;\r\n    }\r\n\r\n    var disassemble = function (string, grouped) {\r\n        if (string === null) {\r\n            throw new Error('Arguments cannot be null');\r\n        }\r\n\r\n        if (typeof string === 'object') {\r\n            string = string.join('');\r\n        }\r\n\r\n        var result = [],\r\n            length = string.length,\r\n            cho,\r\n            jung,\r\n            jong,\r\n            code,\r\n            r\r\n            ;\r\n\r\n        for (var i = 0; i < length; i++) {\r\n            var temp = [];\r\n\r\n            code = string.charCodeAt(i);\r\n            if (_isHangul(code)) { // 완성된 한글이면\r\n                code -= HANGUL_OFFSET;\r\n                jong = code % 28;\r\n                jung = (code - jong) / 28 % 21;\r\n                cho = parseInt((code - jong) / 28 / 21);\r\n                temp.push(CHO[cho]);\r\n                if (typeof JUNG[jung] === 'object') {\r\n                    temp = temp.concat(JUNG[jung]);\r\n                } else {\r\n                    temp.push(JUNG[jung]);\r\n                }\r\n                if (jong > 0) {\r\n                    if (typeof JONG[jong] === 'object') {\r\n                        temp = temp.concat(JONG[jong]);\r\n                    } else {\r\n                        temp.push(JONG[jong]);\r\n                    }\r\n                }\r\n            } else if (_isConsonant(code)) { //자음이면\r\n                if (_isCho(code)) {\r\n                    r = CHO[CHO_HASH[code]];\r\n                } else {\r\n                    r = JONG[JONG_HASH[code]];\r\n                }\r\n                if (typeof r === 'string') {\r\n                    temp.push(r);\r\n                } else {\r\n                    temp = temp.concat(r);\r\n                }\r\n            } else if (_isJung(code)) {\r\n                r = JUNG[JUNG_HASH[code]];\r\n                if (typeof r === 'string') {\r\n                    temp.push(r);\r\n                } else {\r\n                    temp = temp.concat(r);\r\n                }\r\n            } else {\r\n                temp.push(string.charAt(i));\r\n            }\r\n\r\n            if (grouped) result.push(temp);\r\n            else result = result.concat(temp);\r\n        }\r\n\r\n        return result;\r\n    };\r\n\r\n    var disassembleToString = function (str) {\r\n        if (typeof str !== 'string') {\r\n            return '';\r\n        }\r\n        str = disassemble(str);\r\n        return str.join('');\r\n    };\r\n\r\n    var assemble = function (array) {\r\n        if (typeof array === 'string') {\r\n            array = disassemble(array);\r\n        }\r\n\r\n        var result = [],\r\n            length = array.length,\r\n            code,\r\n            stage = 0,\r\n            complete_index = -1, //완성된 곳의 인덱스\r\n            previous_code,\r\n            jong_joined = false\r\n            ;\r\n\r\n        function _makeHangul(index) { // complete_index + 1부터 index까지를 greedy하게 한글로 만든다.\r\n            var code,\r\n                cho,\r\n                jung1,\r\n                jung2,\r\n                jong1 = 0,\r\n                jong2,\r\n                hangul = ''\r\n                ;\r\n\r\n            jong_joined = false;\r\n            if (complete_index + 1 > index) {\r\n                return;\r\n            }\r\n            for (var step = 1; ; step++) {\r\n                if (step === 1) {\r\n                    cho = array[complete_index + step].charCodeAt(0);\r\n                    if (_isJung(cho)) { // 첫번째 것이 모음이면 1) ㅏ같은 경우이거나 2) ㅙ같은 경우이다\r\n                        if (complete_index + step + 1 <= index && _isJung(jung1 = array[complete_index + step + 1].charCodeAt(0))) { //다음것이 있고 모음이면\r\n                            result.push(String.fromCharCode(_isJungJoinable(cho, jung1)));\r\n                            complete_index = index;\r\n                            return;\r\n                        } else {\r\n                            result.push(array[complete_index + step]);\r\n                            complete_index = index;\r\n                            return;\r\n                        }\r\n                    } else if (!_isCho(cho)) {\r\n                        result.push(array[complete_index + step]);\r\n                        complete_index = index;\r\n                        return;\r\n                    }\r\n                    hangul = array[complete_index + step];\r\n                } else if (step === 2) {\r\n                    jung1 = array[complete_index + step].charCodeAt(0);\r\n                    if (_isCho(jung1)) { //두번째 또 자음이 오면 ㄳ 에서 ㅅ같은 경우이다\r\n                        cho = _isJongJoinable(cho, jung1);\r\n                        hangul = String.fromCharCode(cho);\r\n                        result.push(hangul);\r\n                        complete_index = index;\r\n                        return;\r\n                    } else {\r\n                        hangul = String.fromCharCode((CHO_HASH[cho] * 21 + JUNG_HASH[jung1]) * 28 + HANGUL_OFFSET);\r\n                    }\r\n                } else if (step === 3) {\r\n                    jung2 = array[complete_index + step].charCodeAt(0);\r\n                    if (_isJungJoinable(jung1, jung2)) {\r\n                        jung1 = _isJungJoinable(jung1, jung2);\r\n                    } else {\r\n                        jong1 = jung2;\r\n                    }\r\n                    hangul = String.fromCharCode((CHO_HASH[cho] * 21 + JUNG_HASH[jung1]) * 28 + JONG_HASH[jong1] + HANGUL_OFFSET);\r\n                    \r\n                } else if (step === 4) {\r\n                    jong2 = array[complete_index + step].charCodeAt(0);\r\n                    if (_isJongJoinable(jong1, jong2)) {\r\n                        jong1 = _isJongJoinable(jong1, jong2);\r\n                    } else {\r\n                        jong1 = jong2;\r\n                    }\r\n                    hangul = String.fromCharCode((CHO_HASH[cho] * 21 + JUNG_HASH[jung1]) * 28 + JONG_HASH[jong1] + HANGUL_OFFSET);\r\n                } else if (step === 5) {\r\n                    jong2 = array[complete_index + step].charCodeAt(0);\r\n                    jong1 = _isJongJoinable(jong1, jong2);\r\n                    hangul = String.fromCharCode((CHO_HASH[cho] * 21 + JUNG_HASH[jung1]) * 28 + JONG_HASH[jong1] + HANGUL_OFFSET);\r\n                }\r\n\r\n                if (complete_index + step >= index) {\r\n                    result.push(hangul);\r\n                    complete_index = index;\r\n                    return;\r\n                }\r\n            }\r\n        }\r\n\r\n        for (var i = 0; i < length; i++) {\r\n            code = array[i].charCodeAt(0);\r\n            if (!_isCho(code) && !_isJung(code) && !_isJong(code)) { //초, 중, 종성 다 아니면\r\n                _makeHangul(i - 1);\r\n                _makeHangul(i);\r\n                stage = 0;\r\n                continue;\r\n            }\r\n            //console.log(stage, array[i]);\r\n            if (stage === 0) { // 초성이 올 차례\r\n                if (_isCho(code)) { // 초성이 오면 아무 문제 없다.\r\n                    stage = 1;\r\n                } else if (_isJung(code)) {\r\n                    // 중성이오면 ㅐ 또는 ㅘ 인것이다. 바로 구분을 못한다. 따라서 특수한 stage인 stage4로 이동\r\n                    stage = 4;\r\n                }\r\n            } else if (stage == 1) { //중성이 올 차례\r\n                if (_isJung(code)) { //중성이 오면 문제없음 진행.\r\n                    stage = 2;\r\n                } else { //아니고 자음이오면 ㄻ같은 경우가 있고 ㄹㅋ같은 경우가 있다.\r\n                    if (_isJongJoinable(previous_code, code)) {\r\n                        // 합쳐질 수 있다면 ㄻ 같은 경우인데 이 뒤에 모음이 와서 ㄹ마 가 될수도 있고 초성이 올 수도 있다. 따라서 섣불리 완성할 수 없다. 이땐 stage5로 간다.\r\n                        stage = 5;\r\n                    } else { //합쳐질 수 없다면 앞 글자 완성 후 여전히 중성이 올 차례\r\n                        _makeHangul(i - 1);\r\n                    }\r\n                }\r\n            } else if (stage == 2) { //종성이 올 차례\r\n                if (_isJong(code)) { //종성이 오면 다음엔 자음 또는 모음이 온다.\r\n                    stage = 3;\r\n                } else if (_isJung(code)) { //그런데 중성이 오면 앞의 모음과 합칠 수 있는지 본다.\r\n                    if (_isJungJoinable(previous_code, code)) { //합칠 수 있으면 여전히 종성이 올 차례고 그대로 진행\r\n                    } else { // 합칠 수 없다면 오타가 생긴 경우\r\n                        _makeHangul(i - 1);\r\n                        stage = 4;\r\n                    }\r\n                } else { // 받침이 안되는 자음이 오면 ㄸ 같은 이전까지 완성하고 다시시작\r\n                    _makeHangul(i - 1);\r\n                    stage = 1;\r\n                }\r\n            } else if (stage == 3) { // 종성이 하나 온 상태.\r\n                if (_isJong(code)) { // 또 종성이면 합칠수 있는지 본다.\r\n                    if (!jong_joined && _isJongJoinable(previous_code, code)) { //합칠 수 있으면 계속 진행. 왜냐하면 이번에 온 자음이 다음 글자의 초성이 될 수도 있기 때문. 대신 이 기회는 한번만\r\n                        jong_joined = true;\r\n                    } else { //없으면 한글자 완성\r\n                        _makeHangul(i - 1);\r\n                        stage = 1; // 이 종성이 초성이 되고 중성부터 시작\r\n                    }\r\n                } else if (_isCho(code)) { // 초성이면 한글자 완성.\r\n                    _makeHangul(i - 1);\r\n                    stage = 1; //이 글자가 초성이되므로 중성부터 시작\r\n                } else if (_isJung(code)) { // 중성이면 이전 종성은 이 중성과 합쳐지고 앞 글자는 받침이 없다.\r\n                    _makeHangul(i - 2);\r\n                    stage = 2;\r\n                }\r\n            } else if (stage == 4) { // 중성이 하나 온 상태\r\n                if (_isJung(code)) { //중성이 온 경우\r\n                    if (_isJungJoinable(previous_code, code)) { //이전 중성과 합쳐질 수 있는 경우\r\n                        _makeHangul(i);\r\n                        stage = 0;\r\n                    } else { //중성이 왔지만 못합치는 경우. ㅒㅗ 같은\r\n                        _makeHangul(i - 1);\r\n                    }\r\n                } else { // 아니면 자음이 온 경우.\r\n                    _makeHangul(i - 1);\r\n                    stage = 1;\r\n                }\r\n            } else if (stage == 5) { // 초성이 연속해서 두개 온 상태 ㄺ\r\n                if (_isJung(code)) { //이번에 중성이면 ㄹ가\r\n                    _makeHangul(i - 2);\r\n                    stage = 2;\r\n                } else {\r\n                    _makeHangul(i - 1);\r\n                    stage = 1;\r\n                }\r\n            }\r\n            previous_code = code;\r\n        }\r\n        _makeHangul(i - 1);\r\n        return result.join('');\r\n    };\r\n\r\n    var search = function (a, b) {\r\n        var ad = disassemble(a).join(''),\r\n            bd = disassemble(b).join('')\r\n            ;\r\n\r\n        return ad.indexOf(bd);\r\n    };\r\n\r\n    var rangeSearch = function (haystack, needle) {\r\n        var hex = disassemble(haystack).join(''),\r\n            nex = disassemble(needle).join(''),\r\n            grouped = disassemble(haystack, true),\r\n            re = new RegExp(nex, 'gi'),\r\n            indices = [],\r\n            result;\r\n\r\n        if (!needle.length) return [];\r\n\r\n        while ((result = re.exec(hex))) {\r\n            indices.push(result.index);\r\n        }\r\n\r\n        function findStart(index) {\r\n            for (var i = 0, length = 0; i < grouped.length; ++i) {\r\n                length += grouped[i].length;\r\n                if (index < length) return i;\r\n            }\r\n        }\r\n\r\n        function findEnd(index) {\r\n            for (var i = 0, length = 0; i < grouped.length; ++i) {\r\n                length += grouped[i].length;\r\n                if (index + nex.length <= length) return i;\r\n            }\r\n        }\r\n\r\n        return indices.map(function (i) {\r\n            return [findStart(i), findEnd(i)];\r\n        });\r\n    };\r\n\r\n    function Searcher(string) {\r\n        this.string = string;\r\n        this.disassembled = disassemble(string).join('');\r\n    }\r\n\r\n    Searcher.prototype.search = function (string) {\r\n        return disassemble(string).join('').indexOf(this.disassembled);\r\n    };\r\n    var endsWithConsonant = function (string) {\r\n        if (typeof string === 'object') {\r\n            string = string.join('');\r\n        }\r\n\r\n        var code = string.charCodeAt(string.length - 1);\r\n\r\n        if (_isHangul(code)) { // 완성된 한글이면\r\n            code -= HANGUL_OFFSET;\r\n            var jong = code % 28;\r\n            if (jong > 0) {\r\n                return true;\r\n            }\r\n        } else if (_isConsonant(code)) { //자음이면\r\n            return true;\r\n        }\r\n        return false;\r\n    };\r\n\r\n    var endsWith = function (string, target) {\r\n        return disassemble(string).pop() === target;\r\n    };\r\n\r\n\r\n    var hangul = {\r\n        disassemble: disassemble,\r\n        d: disassemble, // alias for disassemble\r\n        disassembleToString: disassembleToString,\r\n        ds: disassembleToString, // alias for disassembleToString\r\n        assemble: assemble,\r\n        a: assemble, // alias for assemble\r\n        search: search,\r\n        rangeSearch: rangeSearch,\r\n        Searcher: Searcher,\r\n        endsWithConsonant: endsWithConsonant,\r\n        endsWith: endsWith,\r\n        isHangul: function (c) {\r\n            if (typeof c === 'string')\r\n                c = c.charCodeAt(0);\r\n            return _isHangul(c);\r\n        },\r\n        isComplete: function (c) {\r\n            if (typeof c === 'string')\r\n                c = c.charCodeAt(0);\r\n            return _isHangul(c);\r\n        },\r\n        isConsonant: function (c) {\r\n            if (typeof c === 'string')\r\n                c = c.charCodeAt(0);\r\n            return _isConsonant(c);\r\n        },\r\n        isVowel: function (c) {\r\n            if (typeof c === 'string')\r\n                c = c.charCodeAt(0);\r\n            return _isJung(c);\r\n        },\r\n        isCho: function (c) {\r\n            if (typeof c === 'string')\r\n                c = c.charCodeAt(0);\r\n            return _isCho(c);\r\n        },\r\n        isJong: function (c) {\r\n            if (typeof c === 'string')\r\n                c = c.charCodeAt(0);\r\n            return _isJong(c);\r\n        },\r\n        isHangulAll: function (str) {\r\n            if (typeof str !== 'string') return false;\r\n            for (var i = 0; i < str.length; i++) {\r\n                if (!_isHangul(str.charCodeAt(i))) return false;\r\n            }\r\n            return true;\r\n        },\r\n        isCompleteAll: function (str) {\r\n            if (typeof str !== 'string') return false;\r\n            for (var i = 0; i < str.length; i++) {\r\n                if (!_isHangul(str.charCodeAt(i))) return false;\r\n            }\r\n            return true;\r\n        },\r\n        isConsonantAll: function (str) {\r\n            if (typeof str !== 'string') return false;\r\n            for (var i = 0; i < str.length; i++) {\r\n                if (!_isConsonant(str.charCodeAt(i))) return false;\r\n            }\r\n            return true;\r\n        },\r\n        isVowelAll: function (str) {\r\n            if (typeof str !== 'string') return false;\r\n            for (var i = 0; i < str.length; i++) {\r\n                if (!_isJung(str.charCodeAt(i))) return false;\r\n            }\r\n            return true;\r\n        },\r\n        isChoAll: function (str) {\r\n            if (typeof str !== 'string') return false;\r\n            for (var i = 0; i < str.length; i++) {\r\n                if (!_isCho(str.charCodeAt(i))) return false;\r\n            }\r\n            return true;\r\n        },\r\n        isJongAll: function (str) {\r\n            if (typeof str !== 'string') return false;\r\n            for (var i = 0; i < str.length; i++) {\r\n                if (!_isJong(str.charCodeAt(i))) return false;\r\n            }\r\n            return true;\r\n        }\r\n    };\r\n\r\n    if (typeof define == 'function' && define.amd) {\r\n        define(function () {\r\n            return hangul;\r\n        });\r\n    } else if (typeof module !== 'undefined') {\r\n        module.exports = hangul;\r\n    } else {\r\n        window.Hangul = hangul;\r\n    }\r\n})();\r\n\r\n"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}