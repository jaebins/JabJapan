{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\SJ507-5\\\\jen2063_jabjapan\\\\src\\\\TranslateApp.js\",\n  _s = $RefreshSig$();\nimport './components/translate/translate.css';\nimport './components/practice/practice.css';\nimport Head from \"./components/head\";\nimport Neck from \"./components/translate/translate_Neck\";\nimport Body from \"./components/translate/translate_Body\";\nimport { useEffect, useState } from 'react';\nimport Cookies from \"react-cookies\";\nimport { useMediaQuery } from 'react-responsive';\nimport * as Hangul from 'hangul-js';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction TranslateApp() {\n  _s();\n  const hiragana_original = \"あかさたなはまやらわがざだばぱ\" + \"いきしちにひみりゐぎじぢびぴ\" + \"うくすつぬふむゆるぐずづぶぷ\" + \"えけせてねへめれゑげぜでべぺ\" + \"おこそとのほもよろをごぞどぼぽ\" + \"ゔ\" + \"アカサタナイキシチニウクスツヌエケセテネオコソトノ\" + \"ヴハマヤラヒミリフムユルヘメレホモヨロ\" + \"ワガザダバパヰギジヂビピグズヅブプヱゲゼデベペヲゴゾドボポ\";\n  const hiragana = \"あかさたなはまやらわがざだばぱ\" + \"いきしちにひみりぎじびぴ\" + \"うくすつぬふむゆるぐずぶぷ\" + \"えけせてねへめれげぜでべぺ\" + \"おこそとのほもよろをごぞどぼぽ\" + \"アカサタナイキシチニウクスツヌエケセテネオコソトノ\" +\n  // 가타카나\n  \"ハマヤラヒミリフムユルヘメレホモヨロ\" + \"ワガザダバパギジビピグズヅブプ\" + \"ゲゼデベペヲゴゾドボポ\";\n  const hiragana_ko = \"아카사타나하마야라와\" + \"가자다바파이키시치니히미리기지비피우쿠스츠누\" + \"푸무유루구즈부푸에케세테네헤메레게제데베페\" + \"오코소토노호모요로워고조도보포\" + \"아카사타나이키시치니우쿠수츠누에케세테네오코소토노\" +\n  // 가타카나\n  \"하마야라히미리푸무유루헤메레호모요로\" + \"와가자다바파기지비피구주주부푸\" + \"게제데베페워고조도보포\";\n  const server_URL = \"\";\n  // const server_URL = \"http://localhost:8001\"\n\n  const [transMode, setTransMode] = useState({\n    // 현재 번역 모드 (targetLan = ja : 일본어 발음을 한국어로, ko : 한국어를 일본어 발음으로)\n    targetLan: \"ja\",\n    resultLan: \"ko\"\n  });\n  const [result, setResult] = useState({\n    // 화면에 보여질 결과\n    japanese_rs: \"\",\n    korean_rs: \"\"\n  });\n  const [rsCounter, setRsCounter] = useState(0);\n  useEffect(() => {\n    if (!isNaN(Cookies.load(\"rsCounter\"))) {\n      setRsCounter(Number(Cookies.load(\"rsCounter\")) + 1);\n    }\n  }, []);\n  const isSmallScreen = useMediaQuery({\n    maxWidth: 500\n  });\n\n  // 번역 모드를 바꿔주는 이벤트\n  const changeMode = () => {\n    var input = document.getElementById(\"translate-body-workingArea-inputArea-inputTarget\");\n    if (transMode.targetLan == \"ja\") {\n      setTransMode({\n        targetLan: \"ko\",\n        resultLan: \"ja\"\n      });\n      input.placeholder = \"단어를 입력해주세요.\";\n    } else {\n      setTransMode({\n        targetLan: \"ja\",\n        resultLan: \"ko\"\n      });\n      input.placeholder = \"일본식 발음으로 정확하게 입력해주세요.\";\n    }\n    input.value = \"\";\n  };\n  const checkOnlyJapanese = char => {\n    for (let i = 0; i < char.length; i++) {\n      if (!hiragana_original.includes(char[i])) {\n        return false;\n      }\n    }\n    return true;\n  };\n\n  // targetText를 해당하는 발음으로 바꿔주는 이벤트\n  const convert_Pronunciation = (targetText, findArr, matchArr, checkTransOriginalWord) => {\n    let convert_target = \"\";\n    if (findArr.length < 1) {\n      // 일본어와 한자를 분리해주는 작업이라면\n      convert_target = targetText;\n    }\n    let backup = {\n      thieroglyph: \"\",\n      japanese: \"\"\n    };\n    let getJapanPronunciation_InResultJp = false;\n    if (targetText[targetText.length - 1] == \"t\") {\n      // 만약 targetText가 한자가 없는 순수한 일본어이면 한자와 나누지 않음 \n      getJapanPronunciation_InResultJp = true;\n      targetText = targetText.substr(0, targetText.length - 1);\n    }\n    for (let i = 0; i < targetText.length; i++) {\n      let char = targetText[i];\n      let append_N = \"\";\n      if (transMode.resultLan == \"ko\" && !checkTransOriginalWord) {\n        // 일본어 발음을 알려고 한다면\n        let cuttingHangul = Hangul.disassemble(targetText[i]);\n        if (cuttingHangul[1] == \"ㅐ\" || cuttingHangul[1] == \"ㅒ\" || cuttingHangul[1] == \"ㅖ\") {\n          cuttingHangul[1] = \"ㅔ\";\n          char = Hangul.assemble(cuttingHangul);\n        }\n        if (cuttingHangul.length > 2 && char != \"와\" && char != \"워\") {\n          // 한글 받침 제거\n          cuttingHangul.length = 2;\n          char = Hangul.assemble(cuttingHangul);\n          append_N = \"ん\";\n          // console.log(\"ㄴ 확인\");\n        }\n      }\n\n      let index = findArr.indexOf(char);\n      if (index != -1 && (transMode.resultLan == \"ko\" || hiragana_original.includes(char))) {\n        convert_target += matchArr[index];\n        convert_target += append_N; // 일본어 ㄴ 발음 확인\n      }\n      // 일본어를 한국어로 바꿀 때, 일본어에서 ん 또는 ン를 찾는다면 받침 ㄴ을 추가해줌\n      else if (index == -1 && (transMode.resultLan == \"ja\" || checkTransOriginalWord) && (char == \"ん\" || char == \"ン\") && findArr.length > 0) {\n        // console.log(\"ん ン 확인 - \", convert_target[convert_target.length - 1]);\n        let char_append_N = Hangul.disassemble(convert_target[convert_target.length - 1]);\n        char_append_N.push(\"ㄴ\");\n        char_append_N = Hangul.assemble(char_append_N);\n        convert_target = convert_target.substr(0, convert_target.length - 1);\n        convert_target += char_append_N;\n      }\n      // 일본어를 한국어로 바꿀 때, 한자를 찾는다면 분리해줌\n      else if (index == -1 && (transMode.resultLan == \"ja\" || checkTransOriginalWord) && !checkOnlyJapanese(char) && !getJapanPronunciation_InResultJp && char != \" \" && !(char == \"ん\" || char == \"ン\")) {\n        let temp = backup.thieroglyph + targetText[i];\n        targetText = targetText.replace(targetText[i], \"\");\n        backup = {\n          thieroglyph: temp,\n          japanese: targetText\n        };\n        // console.log(\"한자 확인\", temp, \"일본어 : \", backup.japanese);\n        convert_target = `${backup.thieroglyph} & ${backup.japanese}`;\n        i--; // 문자수가 빠졌기 때문에 반복문 변수를 1 빼줌\n      }\n    }\n\n    return convert_target;\n  };\n  const checkMode = (targetText, checkTransOriginalWord) => {\n    let convert_target = targetText;\n    if (!checkTransOriginalWord.checked && transMode.resultLan == \"ko\") {\n      // 일본어 발음을 알려고 한다면\n      convert_target = convert_Pronunciation(targetText, hiragana_ko, hiragana, checkTransOriginalWord.checked);\n    }\n    return convert_target;\n  };\n  const setCookieAndResult = rs => {\n    let tempRs = {\n      japanese_rs: rs.originalJapanese_rs != \"\" ? rs.originalJapanese_rs : rs.japanese_rs,\n      korean_rs: rs.originalKorean_rs != \"\" ? rs.originalKorean_rs : rs.korean_rs\n    };\n    setRsCounter(rsCounter + 1);\n    Cookies.save(\"rs\" + Number(rsCounter + 1), tempRs);\n    Cookies.save(\"rsCounter\", rsCounter);\n    setResult(rs);\n  };\n  const jaMode_OriginalTranslate = (originalText, convert_target, rs) => {\n    const url = server_URL + `/translate?text=${convert_target}`;\n    fetch(url).then(res => {\n      return res.json();\n    }).then(rs => {\n      rs.originalJapanese_rs = originalText;\n      rs.originalKorean_rs = \"\";\n      rs.korean_rs = rs.message.result.translatedText;\n      rs.japanese_rs = convert_Pronunciation(convert_target, hiragana, hiragana_ko, true);\n      setCookieAndResult(rs);\n    });\n  };\n  const jaMode_Translate = (doc, rs, backupText) => {\n    rs.japanese_rs = backupText;\n    if (doc.querySelectorAll(\".txt_search\").length > 1) {\n      rs.korean_rs = !checkOnlyJapanese(doc.querySelectorAll(\".txt_search\")[1].innerText) ?\n      // 만약 일본어가 들어있는게 아니라면 두번째 의미까지 추가해줌\n      doc.querySelectorAll(\".txt_search\")[1].innerText + \", \" : \"\";\n    }\n    rs.korean_rs += `${doc.querySelectorAll(\".txt_search\")[0].innerText}`;\n    return rs;\n  };\n  const koMode_translate = (doc, rs) => {\n    let parsingRs = doc.querySelectorAll(\".kujk_type > .search_word > .tit_searchword > .txt_searchword\");\n    if (parsingRs.length < 1) {\n      parsingRs = doc.querySelectorAll(\".kukj_type > .list_search > li > .txt_search\");\n    }\n    rs.japanese_rs = parsingRs[0].innerText;\n    rs.korean_rs = convert_Pronunciation(rs.japanese_rs + \"t\", hiragana, hiragana_ko, false);\n    rs.japanese_rs = convert_Pronunciation(rs.japanese_rs, [], [], false); // 한자와 일본어를 분리하는 작업\n\n    return rs;\n  };\n\n  // input에 입력된 데이터를 번역시켜주는 이벤트\n  const translate = () => {\n    const targetText = document.getElementById(\"translate-body-workingArea-inputArea-inputTarget\").value;\n    if (targetText.length < 1) {\n      return;\n    }\n    const checkTransOriginalWord = document.getElementById(\"translate-body-workingArea-inputArea-checkTransOriginalWord\");\n    let rs = {\n      japanese_rs: \"\",\n      originalJapanese_rs: \"\",\n      korean_rs: \"\",\n      originalKorean_rs: \"\"\n    };\n    let convert_target = checkMode(targetText, checkTransOriginalWord);\n    if (checkTransOriginalWord.checked && transMode.resultLan == \"ko\") {\n      // 일본어 그대로 변역할려고 한다면\n      jaMode_OriginalTranslate(targetText, convert_target, checkTransOriginalWord, rs);\n    } else {\n      const url = server_URL + `/findWord/?q=${convert_target}`;\n      fetch(url).then(res => {\n        return res.text();\n      }).then(html => {\n        let parser = new DOMParser();\n        let doc = parser.parseFromString(html, \"text/html\");\n        if (transMode.resultLan == \"ja\") {\n          // 한국어를 일본어로\n          rs.originalKorean_rs = targetText;\n          rs = koMode_translate(doc, rs);\n        } else {\n          rs = jaMode_Translate(doc, rs, convert_target); // 한국어 발음 일본어를 일본어로\n        }\n\n        setCookieAndResult(rs);\n      }).catch(err => {\n        alert(err);\n      });\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"TranslateApp\",\n    children: [/*#__PURE__*/_jsxDEV(Head, {\n      title: \"TranslateMode\",\n      link: \"/\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 268,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Neck, {\n      isSmallScreen: isSmallScreen\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 269,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Body, {\n      changeMode: changeMode,\n      translate: translate,\n      transMode: transMode,\n      result: result\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 270,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 267,\n    columnNumber: 5\n  }, this);\n}\n_s(TranslateApp, \"TkQhc7F277bExBJmtPo5UQowA4c=\", false, function () {\n  return [useMediaQuery];\n});\n_c = TranslateApp;\nexport default TranslateApp;\nvar _c;\n$RefreshReg$(_c, \"TranslateApp\");","map":{"version":3,"names":["Head","Neck","Body","useEffect","useState","Cookies","useMediaQuery","Hangul","jsxDEV","_jsxDEV","TranslateApp","_s","hiragana_original","hiragana","hiragana_ko","server_URL","transMode","setTransMode","targetLan","resultLan","result","setResult","japanese_rs","korean_rs","rsCounter","setRsCounter","isNaN","load","Number","isSmallScreen","maxWidth","changeMode","input","document","getElementById","placeholder","value","checkOnlyJapanese","char","i","length","includes","convert_Pronunciation","targetText","findArr","matchArr","checkTransOriginalWord","convert_target","backup","thieroglyph","japanese","getJapanPronunciation_InResultJp","substr","append_N","cuttingHangul","disassemble","assemble","index","indexOf","char_append_N","push","temp","replace","checkMode","checked","setCookieAndResult","rs","tempRs","originalJapanese_rs","originalKorean_rs","save","jaMode_OriginalTranslate","originalText","url","fetch","then","res","json","message","translatedText","jaMode_Translate","doc","backupText","querySelectorAll","innerText","koMode_translate","parsingRs","translate","text","html","parser","DOMParser","parseFromString","catch","err","alert","className","children","title","link","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["C:/Users/SJ507-5/jen2063_jabjapan/src/TranslateApp.js"],"sourcesContent":["import './components/translate/translate.css';\r\nimport './components/practice/practice.css';\r\nimport Head from \"./components/head\";\r\nimport Neck from \"./components/translate/translate_Neck\"\r\nimport Body from \"./components/translate/translate_Body\";\r\nimport { useEffect, useState } from 'react';\r\nimport Cookies from \"react-cookies\"\r\nimport { useMediaQuery } from 'react-responsive';\r\nimport * as Hangul from 'hangul-js';\r\n\r\nfunction TranslateApp() {\r\n  const hiragana_original = \"あかさたなはまやらわがざだばぱ\" +\r\n    \"いきしちにひみりゐぎじぢびぴ\" +\r\n    \"うくすつぬふむゆるぐずづぶぷ\" +\r\n    \"えけせてねへめれゑげぜでべぺ\" +\r\n    \"おこそとのほもよろをごぞどぼぽ\" +\r\n    \"ゔ\" +\r\n    \"アカサタナイキシチニウクスツヌエケセテネオコソトノ\" +\r\n    \"ヴハマヤラヒミリフムユルヘメレホモヨロ\" +\r\n    \"ワガザダバパヰギジヂビピグズヅブプヱゲゼデベペヲゴゾドボポ\";\r\n\r\n  const hiragana = \"あかさたなはまやらわがざだばぱ\" +\r\n    \"いきしちにひみりぎじびぴ\" +\r\n    \"うくすつぬふむゆるぐずぶぷ\" +\r\n    \"えけせてねへめれげぜでべぺ\" +\r\n    \"おこそとのほもよろをごぞどぼぽ\" +\r\n    \"アカサタナイキシチニウクスツヌエケセテネオコソトノ\" + // 가타카나\r\n    \"ハマヤラヒミリフムユルヘメレホモヨロ\" +\r\n    \"ワガザダバパギジビピグズヅブプ\" +\r\n    \"ゲゼデベペヲゴゾドボポ\";\r\n  const hiragana_ko = \"아카사타나하마야라와\" +\r\n    \"가자다바파이키시치니히미리기지비피우쿠스츠누\" +\r\n    \"푸무유루구즈부푸에케세테네헤메레게제데베페\" +\r\n    \"오코소토노호모요로워고조도보포\" +\r\n    \"아카사타나이키시치니우쿠수츠누에케세테네오코소토노\" + // 가타카나\r\n    \"하마야라히미리푸무유루헤메레호모요로\" +\r\n    \"와가자다바파기지비피구주주부푸\" +\r\n    \"게제데베페워고조도보포\";\r\n\r\n  const server_URL = \"\";\r\n  // const server_URL = \"http://localhost:8001\"\r\n  \r\n  const [transMode, setTransMode] = useState({ // 현재 번역 모드 (targetLan = ja : 일본어 발음을 한국어로, ko : 한국어를 일본어 발음으로)\r\n    targetLan: \"ja\",\r\n    resultLan: \"ko\"\r\n  });\r\n  const [result, setResult] = useState({ // 화면에 보여질 결과\r\n    japanese_rs: \"\",\r\n    korean_rs: \"\",\r\n  })\r\n  const [rsCounter, setRsCounter] = useState(0);\r\n\r\n  useEffect(() => {\r\n    if(!isNaN(Cookies.load(\"rsCounter\"))){\r\n      setRsCounter(Number(Cookies.load(\"rsCounter\")) + 1);\r\n    }\r\n  }, [])\r\n\r\n  const isSmallScreen = useMediaQuery({maxWidth: 500});\r\n  \r\n\r\n  // 번역 모드를 바꿔주는 이벤트\r\n  const changeMode = () => {\r\n    var input = document.getElementById(\"translate-body-workingArea-inputArea-inputTarget\");\r\n\r\n    if (transMode.targetLan == \"ja\") {\r\n      setTransMode({\r\n        targetLan: \"ko\",\r\n        resultLan: \"ja\",\r\n      });\r\n      \r\n      input.placeholder = \"단어를 입력해주세요.\";\r\n    }\r\n    else {\r\n      setTransMode({\r\n        targetLan: \"ja\",\r\n        resultLan: \"ko\"\r\n      });\r\n      input.placeholder = \"일본식 발음으로 정확하게 입력해주세요.\";\r\n    }\r\n\r\n    input.value = \"\";\r\n  }\r\n\r\n  const checkOnlyJapanese = (char) => {\r\n    for (let i = 0; i < char.length; i++) {\r\n      if (!hiragana_original.includes(char[i])) {\r\n        return false;\r\n      }\r\n    }\r\n    return true;\r\n  }\r\n\r\n  // targetText를 해당하는 발음으로 바꿔주는 이벤트\r\n  const convert_Pronunciation = (targetText, findArr, matchArr, checkTransOriginalWord) => {\r\n    let convert_target = \"\";\r\n    if(findArr.length < 1){ // 일본어와 한자를 분리해주는 작업이라면\r\n      convert_target = targetText;\r\n    }\r\n    let backup = {\r\n      thieroglyph: \"\",\r\n      japanese: \"\"\r\n    }\r\n\r\n    let getJapanPronunciation_InResultJp = false;\r\n    if (targetText[targetText.length - 1] == \"t\") { // 만약 targetText가 한자가 없는 순수한 일본어이면 한자와 나누지 않음 \r\n      getJapanPronunciation_InResultJp = true;\r\n      targetText = targetText.substr(0, targetText.length - 1);\r\n    }\r\n\r\n    for (let i = 0; i < targetText.length; i++) {\r\n      let char = targetText[i];\r\n      let append_N = \"\";\r\n\r\n      if (transMode.resultLan == \"ko\" && !checkTransOriginalWord) { // 일본어 발음을 알려고 한다면\r\n        let cuttingHangul = Hangul.disassemble(targetText[i]);\r\n        if(cuttingHangul[1] == \"ㅐ\" || cuttingHangul[1] == \"ㅒ\" || cuttingHangul[1] == \"ㅖ\"){ \r\n          cuttingHangul[1] = \"ㅔ\"\r\n          char = Hangul.assemble(cuttingHangul);\r\n        }\r\n        if (cuttingHangul.length > 2 && char != \"와\" && char != \"워\") { // 한글 받침 제거\r\n          cuttingHangul.length = 2;\r\n          char = Hangul.assemble(cuttingHangul);\r\n          append_N = \"ん\";\r\n          // console.log(\"ㄴ 확인\");\r\n        }\r\n      }\r\n\r\n      let index = findArr.indexOf(char);\r\n      if (index != -1 && (transMode.resultLan == \"ko\" || hiragana_original.includes(char))) {\r\n        convert_target += matchArr[index];\r\n        convert_target += append_N // 일본어 ㄴ 발음 확인\r\n      }\r\n      // 일본어를 한국어로 바꿀 때, 일본어에서 ん 또는 ン를 찾는다면 받침 ㄴ을 추가해줌\r\n      else if (index == -1 && (transMode.resultLan == \"ja\" || checkTransOriginalWord) && (char == \"ん\" || char == \"ン\") && findArr.length > 0) {\r\n        // console.log(\"ん ン 확인 - \", convert_target[convert_target.length - 1]);\r\n        let char_append_N = Hangul.disassemble(convert_target[convert_target.length - 1])\r\n        char_append_N.push(\"ㄴ\")\r\n        char_append_N = Hangul.assemble(char_append_N);\r\n        convert_target = convert_target.substr(0, convert_target.length - 1);\r\n        convert_target += char_append_N;\r\n      }\r\n      // 일본어를 한국어로 바꿀 때, 한자를 찾는다면 분리해줌\r\n      else if (index == -1 && (transMode.resultLan == \"ja\" || checkTransOriginalWord) &&\r\n      !checkOnlyJapanese(char) && !getJapanPronunciation_InResultJp && char != \" \" && !(char == \"ん\" || char == \"ン\")) {\r\n        let temp = backup.thieroglyph + targetText[i];\r\n        targetText = targetText.replace(targetText[i], \"\");\r\n        backup = {\r\n          thieroglyph: temp,\r\n          japanese: targetText,\r\n        }\r\n        // console.log(\"한자 확인\", temp, \"일본어 : \", backup.japanese);\r\n        convert_target = `${backup.thieroglyph} & ${backup.japanese}`;\r\n        i--; // 문자수가 빠졌기 때문에 반복문 변수를 1 빼줌\r\n      }\r\n    }\r\n\r\n    return convert_target;\r\n  }\r\n\r\n  const checkMode = (targetText, checkTransOriginalWord) => {\r\n    let convert_target = targetText;\r\n    if (!checkTransOriginalWord.checked && transMode.resultLan == \"ko\") { // 일본어 발음을 알려고 한다면\r\n      convert_target = convert_Pronunciation(targetText, hiragana_ko, hiragana, checkTransOriginalWord.checked);\r\n    }\r\n    return convert_target;\r\n  }\r\n\r\n  const setCookieAndResult = (rs) => {\r\n    let tempRs = {\r\n      japanese_rs: rs.originalJapanese_rs != \"\" ? rs.originalJapanese_rs : rs.japanese_rs,\r\n      korean_rs: rs.originalKorean_rs != \"\" ? rs.originalKorean_rs : rs.korean_rs,\r\n    }\r\n    setRsCounter(rsCounter + 1);\r\n    Cookies.save(\"rs\" + Number(rsCounter + 1), tempRs);\r\n    Cookies.save(\"rsCounter\", rsCounter);\r\n    setResult(rs);\r\n  }\r\n\r\n  const jaMode_OriginalTranslate = (originalText, convert_target, rs) => {\r\n    const url = server_URL + `/translate?text=${convert_target}`;\r\n\r\n    fetch(url)\r\n      .then((res) => {\r\n        return res.json()\r\n      }).then((rs) => {\r\n        rs.originalJapanese_rs = originalText;\r\n        rs.originalKorean_rs = \"\";\r\n        rs.korean_rs = rs.message.result.translatedText;\r\n        rs.japanese_rs = convert_Pronunciation(convert_target, hiragana, hiragana_ko, true);\r\n        setCookieAndResult(rs);\r\n      })\r\n  }\r\n\r\n  const jaMode_Translate = (doc, rs, backupText) => {\r\n    rs.japanese_rs = backupText;\r\n    if (doc.querySelectorAll(\".txt_search\").length > 1) {\r\n      rs.korean_rs = !checkOnlyJapanese(doc.querySelectorAll(\".txt_search\")[1].innerText) ? // 만약 일본어가 들어있는게 아니라면 두번째 의미까지 추가해줌\r\n        doc.querySelectorAll(\".txt_search\")[1].innerText + \", \" : \"\";\r\n    }\r\n    rs.korean_rs += `${doc.querySelectorAll(\".txt_search\")[0].innerText}`;\r\n\r\n    return rs;\r\n  }\r\n\r\n  const koMode_translate = (doc, rs) => {\r\n    let parsingRs = doc.querySelectorAll(\".kujk_type > .search_word > .tit_searchword > .txt_searchword\");\r\n    if(parsingRs.length < 1){\r\n      parsingRs = doc.querySelectorAll(\".kukj_type > .list_search > li > .txt_search\");\r\n    }\r\n    \r\n    rs.japanese_rs = parsingRs[0].innerText;\r\n    rs.korean_rs = convert_Pronunciation(rs.japanese_rs + \"t\", hiragana, hiragana_ko, false);\r\n    rs.japanese_rs = convert_Pronunciation(rs.japanese_rs, [], [], false); // 한자와 일본어를 분리하는 작업\r\n    \r\n    return rs;\r\n  }\r\n\r\n  // input에 입력된 데이터를 번역시켜주는 이벤트\r\n  const translate = () => {\r\n\r\n    const targetText = document.getElementById(\"translate-body-workingArea-inputArea-inputTarget\").value;\r\n    if (targetText.length < 1) {\r\n      return;\r\n    }\r\n\r\n    const checkTransOriginalWord = document.getElementById(\"translate-body-workingArea-inputArea-checkTransOriginalWord\");\r\n    let rs = {\r\n      japanese_rs: \"\",\r\n      originalJapanese_rs: \"\",\r\n      korean_rs: \"\",\r\n      originalKorean_rs: \"\"\r\n    }\r\n\r\n    let convert_target = checkMode(targetText, checkTransOriginalWord);\r\n\r\n    if (checkTransOriginalWord.checked && transMode.resultLan == \"ko\") { // 일본어 그대로 변역할려고 한다면\r\n      jaMode_OriginalTranslate(targetText, convert_target, checkTransOriginalWord, rs)\r\n    }\r\n    else {\r\n      const url = server_URL + `/findWord/?q=${convert_target}`;\r\n\r\n      fetch(url)\r\n          .then(res => {\r\n            return res.text();\r\n          }).then(html => {\r\n            let parser = new DOMParser();\r\n            let doc = parser.parseFromString(html, \"text/html\");\r\n            \r\n            if(transMode.resultLan == \"ja\"){ // 한국어를 일본어로\r\n              rs.originalKorean_rs = targetText;\r\n              rs = koMode_translate(doc, rs);\r\n            }\r\n            else{\r\n              rs = jaMode_Translate(doc, rs, convert_target); // 한국어 발음 일본어를 일본어로\r\n            }\r\n\r\n            setCookieAndResult(rs);\r\n          }).catch((err) => {\r\n            alert(err);\r\n          })\r\n    }\r\n\r\n  }\r\n\r\n  return (\r\n    <div className=\"TranslateApp\">\r\n      <Head title={\"TranslateMode\"} link=\"/\"></Head>\r\n      <Neck isSmallScreen={isSmallScreen}></Neck>\r\n      <Body changeMode={changeMode} translate={translate} transMode={transMode} result={result}></Body>\r\n    </div>\r\n  );\r\n}\r\nexport default TranslateApp;\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}